import { AccountRepositoryDatabase, AccountRepositoryMemory } from "./infra/repository/AccountRepository";
import Withdraw from "./application/usecase/Withdraw";
import Deposit from "./application/usecase/Deposit";
import { OrderRepositoryDatabase } from "./infra/repository/OrderRepository";
import { ExpressAdapter, HapiAdapter } from "./infra/http/HttpServer";
import AccountController from "./infra/controller/AccountController";
import OrderController from "./infra/controller/OrderController";
import { PgPromiseAdapter } from "./infra/database/DatabaseConnection";
import GetAccount from "./application/usecase/GetAccount";
import GetOrder from "./application/usecase/GetOrder";
import PlaceOrder from "./application/usecase/PlaceOrder";
import Signup from "./application/usecase/Signup";
import GetDepth from "./application/usecase/GetDepth";
import { Mediator } from "./infra/mediator/Mediator";
import ExecuteOrder from "./application/usecase/ExecuteOrder";
import { WSSAdapter } from "./infra/websocket/WebSocketServer";
import OrderHandler from "./application/handler/OrderHandler";
import { TradeRepositoryDatabase } from "./infra/repository/TradeRepository";
import TradeController from "./infra/controller/TradeController";
import GetTrades from "./application/usecase/GetTrades";
import Book from "./domain/Book";
import BookHandler from "./application/handler/BookHandler";
import BookCache from "./infra/cache/BookCache";
import { BookRepositoryDatabase } from "./infra/repository/BookRepository";
import { RabbitMQAdapter } from "./infra/queue/Queue";
import BookQueue from "./infra/queue/BookQueue";

async function main () {
    const httpServer = new ExpressAdapter();
    // const httpServer = new HapiAdapter();
    // const websocketServer = new WSSAdapter(3001);
    const connection = new PgPromiseAdapter();
    const queue = new RabbitMQAdapter();
    await queue.connect();
    const mediator = new Mediator();
    const accountRepository = new AccountRepositoryDatabase(connection);
    const orderRepository = new OrderRepositoryDatabase(connection);
    const tradeRepository = new TradeRepositoryDatabase(connection);
    const bookRepository = new BookRepositoryDatabase(connection);
    const signup = new Signup(accountRepository);
    const getAccount = new GetAccount(accountRepository);
    const withdraw = new Withdraw(accountRepository);
    const deposit = new Deposit(accountRepository);
    const placeOrder = new PlaceOrder(orderRepository, mediator, queue);
    const executeOrder = new ExecuteOrder(orderRepository, tradeRepository);
    const getOrder = new GetOrder(orderRepository);
    const getDepth = new GetDepth(orderRepository);
    const getTrades = new GetTrades(tradeRepository);
    // OrderHandler.config(mediator, websocketServer, executeOrder, getDepth);
    // const books = await bookRepository.getBooks();
    // console.log(books.length);
    // const bookCache = new BookCache();
    // bookCache.load(books);
    // BookHandler.config(mediator, websocketServer, bookCache, orderRepository, tradeRepository);
    AccountController.config(httpServer, signup, deposit, withdraw, getAccount);
    OrderController.config(httpServer, placeOrder, getOrder, getDepth);
    TradeController.config(httpServer, getTrades);
    BookQueue.config(queue, orderRepository, tradeRepository);
    httpServer.listen(3000);
}

main();
